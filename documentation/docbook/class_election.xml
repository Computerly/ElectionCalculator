<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_election" xml:lang="en-US">
<title>Election Class Reference</title>
<indexterm><primary>Election</primary></indexterm>
<para>
<computeroutput>#include &lt;Election.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Election:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_election.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_election_1a59bbbe10e8f82e28edf933cd7e763e09">Election</link> (vector&lt; string &gt; inFiles)</para>

<para>a constructor to create the election class based on a file </para>
</listitem>
            <listitem><para>virtual <link linkend="_class_election_1a5716fcfc390fe42d3cce8ae8eac51ee5">~Election</link> ()</para>

<para>Destroy the <link linkend="_class_election">Election</link>:: <link linkend="_class_election">Election</link> object. </para>
</listitem>
            <listitem><para>int <link linkend="_class_election_1a0b68106ee52f33286364ef5d617d77ee">getNumSeats</link> ()</para>

<para>Gets the size of the seats in the election. </para>
</listitem>
            <listitem><para>int <link linkend="_class_election_1aea563e0f8efc014fe5bc6ca55b078d9a">getNumCandidates</link> ()</para>

<para>Gets the number of candidates in the election. </para>
</listitem>
            <listitem><para>int <link linkend="_class_election_1ade6ad99d57f425d06f7f6f5bf28bed5c">getNumBallots</link> ()</para>

<para>Gets the number of ballots in the election. </para>
</listitem>
            <listitem><para>int <link linkend="_class_election_1a4c69a091a1504383315328f505a5f30f">getDroopQuota</link> ()</para>

<para>Gets the number of Drooop quota in the election. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_class_election_1ad1870564672bdb4d2d054d4b7f065d5d">getNumWinners</link> ()</para>

<para>Gets the size of the winners in the election. </para>
</listitem>
            <listitem><para>int <link linkend="_class_election_1a80881f59d3a334dc61a0a3d086456635">getNumLosers</link> ()</para>

<para>Gets the size of the losers in the election. </para>
</listitem>
            <listitem><para>string <link linkend="_class_election_1af9ffbf9414f3129a2db5cab5b2827751">getElectionType</link> ()</para>

<para>Gets the election type in the election. </para>
</listitem>
            <listitem><para>vector&lt; <link linkend="_class_candidate">Candidate</link> &gt; &amp; <link linkend="_class_election_1a89c14e25245d84d5214e58809f04e336">getCandidates</link> ()</para>

<para>Gets the vector of candidates in the election. </para>
</listitem>
            <listitem><para>vector&lt; <link linkend="_class_candidate">Candidate</link> * &gt; <link linkend="_class_election_1a0258ea1cae7db815ff507c82ce1d75a0">getWinners</link> ()</para>

<para>Gets the winners vector in the election. </para>
</listitem>
            <listitem><para>vector&lt; <link linkend="_class_candidate">Candidate</link> * &gt; <link linkend="_class_election_1a698e580dcf403280456bc77f70799405">getLosers</link> ()</para>

<para>Gets the losers vector in the election. </para>
</listitem>
            <listitem><para>vector&lt; string &gt; &amp; <link linkend="_class_election_1abfa41a8e17a3a1869fc42aabb0054bbc">getHeader</link> ()</para>

<para>Gets the vector of each header line in the election. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1a3cfb8628a0841dc5bb41c565e8177c2d">addWinner</link> (<link linkend="_class_candidate">Candidate</link> *c)</para>

<para>Method to add a candidate to the winners vector. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1a2e3af400db4cd7b2ced380dbce0c5a7e">addLoser</link> (<link linkend="_class_candidate">Candidate</link> *c)</para>

<para>Method to add a candidate to the losers vector. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1a8b0fa9b711db7a7f7236d44749729c2c">setDroopQuota</link> (unsigned int n)</para>

<para>Setter function to set the droop quota. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1af03da7d47d1d0e594dde51971e26889a">addBallots</link> (unsigned int n)</para>

<para>Setter function to add n ballots. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1a365a0111ad658420788253fb423b8cf1">removeBallots</link> (unsigned int n=1)</para>

<para>Setter function to remove n ballots. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1a97214525cf583a21e43f80a770ed23dc">setNumberOfCandidates</link> (unsigned int)</para>

<para>Setter function to set number of Candidates. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1a948d46c6c930e1a759df8370282e382b">setNumberOfSeats</link> (unsigned int)</para>

<para>Setter function to add n ballots. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1a056dcc5d34f21305c298a27282703119">setNumberOfBallots</link> (unsigned int)</para>

<para>Setter function to set number of ballots. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1aef61e7926b2322a0ae07cc0873a14401">addCandidate</link> (<link linkend="_class_candidate">Candidate</link> c)</para>

<para>Setter function to add c <link linkend="_class_candidate">Candidate</link> to candidates vector. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1a2679563e40fa9fefa255377bcafc9c0e">setElectionType</link> (string type)</para>

<para>Setter function to set election type. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_election_1a1d84fd2f5cd7b14b2e9a729e7804286f">runElection</link> ()=0</para>

<para>Abstract method to orchestrate an elections process. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_election_1a1a06089736577ef9dce522ccdc46fcb2">displayResults</link> (bool doColors=1)=0</para>

<para>Abstract method to display results of the election. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_election_1a82e0c840e14b8b54cb40eef54dd29f1f">writeToAudit</link> (string s=&quot;&quot;)=0</para>

<para>Abstract method to write election results and election process to an audit file. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_election_1aaaf320a6c7863b363f34bd47320b68ef">digest</link> (string buff)=0</para>

<para>Abstract method to process and save a ballot into the election&apos;s data structure. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_election_1a9f2a807ba12358daa9d2ed94946748de">processHeaders</link> ()=0</para>

<para>Abstract method to store lines from headers vector into respective members. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_election_1a0019d751dfca855ee50b7800884450fb">confirmHeadersDisplay</link> ()=0</para>

<para>Abstract method to display header files. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1ad5f014c63a9069df284ccbd1676f2cce">confirmHeaders</link> ()</para>

<para>Wrapper method of <link linkend="_class_election_1a0019d751dfca855ee50b7800884450fb">confirmHeadersDisplay()</link> </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1a65200d7f72c9ac0f7678e91b4f660730">digestBallots</link> ()</para>

<para>Wrapper method to &quot;digest&quot; the ballots from a file. </para>
</listitem>
            <listitem><para>void <link linkend="_class_election_1a9d6f8d633b57aa2cd89ce1ab6f7e553e">writeElectionResults</link> (string s)</para>

<para>Method to create a results file for the election. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_class_election_1a5a36c9bc9296e09825b49d8deb3f3874">flipCoin</link> ()</para>

<para>Function to randomly and fairly &quot;flip a coin&quot;. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__election_8h_source_1l00019">19</link> of file <link linkend="__election_8h_source">Election.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_election_1a59bbbe10e8f82e28edf933cd7e763e09"/><section>
    <title>Election()</title>
<indexterm><primary>Election</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>Election</secondary></indexterm>
<para><computeroutput>Election::Election (vector&lt; string &gt; inFiles)</computeroutput></para><para>

<para>a constructor to create the election class based on a file </para>
</para>

<para><formalpara><title>Returns</title>

<para>string (file name) </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00016">16</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a5716fcfc390fe42d3cce8ae8eac51ee5"/><section>
    <title>~Election()</title>
<indexterm><primary>~Election</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>~Election</secondary></indexterm>
<para><computeroutput>Election::~Election ( )<computeroutput>[virtual]</computeroutput>, <computeroutput>[default]</computeroutput></computeroutput></para><para>

<para>Destroy the <link linkend="_class_election">Election</link>:: <link linkend="_class_election">Election</link> object. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_election_1af03da7d47d1d0e594dde51971e26889a"/><section>
    <title>addBallots()</title>
<indexterm><primary>addBallots</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>addBallots</secondary></indexterm>
<para><computeroutput>void Election::addBallots (unsigned int n)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Setter function to add n ballots. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>unsigned</entry><entry>
<para>int n of ballots </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00114">114</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1aef61e7926b2322a0ae07cc0873a14401"/><section>
    <title>addCandidate()</title>
<indexterm><primary>addCandidate</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>addCandidate</secondary></indexterm>
<para><computeroutput>void Election::addCandidate (<link linkend="_class_candidate">Candidate</link> c)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Setter function to add c <link linkend="_class_candidate">Candidate</link> to candidates vector. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry><link linkend="_class_candidate">Candidate</link></entry><entry>
<para>c </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00131">131</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a2e3af400db4cd7b2ced380dbce0c5a7e"/><section>
    <title>addLoser()</title>
<indexterm><primary>addLoser</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>addLoser</secondary></indexterm>
<para><computeroutput>void Election::addLoser (<link linkend="_class_candidate">Candidate</link> * c)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Method to add a candidate to the losers vector. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>c</entry><entry>
<para>is the candidate to be added to the losers vector </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00103">103</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a3cfb8628a0841dc5bb41c565e8177c2d"/><section>
    <title>addWinner()</title>
<indexterm><primary>addWinner</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>addWinner</secondary></indexterm>
<para><computeroutput>void Election::addWinner (<link linkend="_class_candidate">Candidate</link> * c)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Method to add a candidate to the winners vector. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>c</entry><entry>
<para>is the candidate to be added to the winners vector </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00094">94</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1ad5f014c63a9069df284ccbd1676f2cce"/><section>
    <title>confirmHeaders()</title>
<indexterm><primary>confirmHeaders</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>confirmHeaders</secondary></indexterm>
<para><computeroutput>void Election::confirmHeaders ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Wrapper method of <link linkend="_class_election_1a0019d751dfca855ee50b7800884450fb">confirmHeadersDisplay()</link> </para>
</para>

<para>Continuously calls confirmHeadersDisplay until the user confirms the results are correct </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00145">145</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a0019d751dfca855ee50b7800884450fb"/><section>
    <title>confirmHeadersDisplay()</title>
<indexterm><primary>confirmHeadersDisplay</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>confirmHeadersDisplay</secondary></indexterm>
<para><computeroutput>virtual void Election::confirmHeadersDisplay ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Abstract method to display header files. </para>
</para>

<para><note><title>Note</title>

<para>see <link linkend="_class_election_1a0019d751dfca855ee50b7800884450fb">confirmHeadersDisplay()</link> </para>
</note>
</para>
<para>
Implemented in <link linkend="_class_i_r_v_1ab5dabb07b08c1ecbe24a3082365eb3ec">IRV</link>, <link linkend="_class_o_p_l_1ace92dde13267db78dc93987743cdc2b0">OPL</link>, and <link linkend="_class_p_o_1a3876aa6a9712fc8d8236a7488ae733f9">PO</link>.</para>
</section>
<anchor xml:id="_class_election_1aaaf320a6c7863b363f34bd47320b68ef"/><section>
    <title>digest()</title>
<indexterm><primary>digest</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>digest</secondary></indexterm>
<para><computeroutput>virtual void Election::digest (string buff)<computeroutput>[protected]</computeroutput>, <computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Abstract method to process and save a ballot into the election&apos;s data structure. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::string, line</entry><entry>
<para>from csv passed from <link linkend="_class_election_1a65200d7f72c9ac0f7678e91b4f660730">digestBallots()</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implemented in <link linkend="_class_i_r_v_1a04e425b6602f4e390b12a260ff588b38">IRV</link>, <link linkend="_class_o_p_l_1a5419c9d466da3dca3e51a616bda6c428">OPL</link>, and <link linkend="_class_p_o_1ac1b64bb0e8d3806ee868e7ef2470578f">PO</link>.</para>
</section>
<anchor xml:id="_class_election_1a65200d7f72c9ac0f7678e91b4f660730"/><section>
    <title>digestBallots()</title>
<indexterm><primary>digestBallots</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>digestBallots</secondary></indexterm>
<para><computeroutput>void Election::digestBallots ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Wrapper method to &quot;digest&quot; the ballots from a file. </para>
</para>

<para>Automatically skips election&apos;s header and reads line by line in <link linkend="_class_election">Election</link> file. Calls <link linkend="_class_election_1aaaf320a6c7863b363f34bd47320b68ef">digest()</link> (implemented in each child class of <link linkend="_class_election">Election</link>) with the current line as its sole parameter.</para>

<para><note><title>Note</title>

<para>&quot;Digest&quot; means to process the ballots and sort them appropriately into the data structure </para>
</note>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00197">197</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a1a06089736577ef9dce522ccdc46fcb2"/><section>
    <title>displayResults()</title>
<indexterm><primary>displayResults</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>displayResults</secondary></indexterm>
<para><computeroutput>virtual void Election::displayResults (bool doColors = <computeroutput>1</computeroutput>
)<computeroutput>[protected]</computeroutput>, <computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Abstract method to display results of the election. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>bool</entry><entry>
<para>doColors, indicates if displayResults should print using colors(true) or not(false) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implemented in <link linkend="_class_p_o_1adaa1725adb8ab847e9f1f6569db9a91a">PO</link>, <link linkend="_class_i_r_v_1a9edf85c29fad64404c8d0e42bee903ff">IRV</link>, and <link linkend="_class_o_p_l_1af6a5fa25cd1fd48cd27eeb480e53b548">OPL</link>.</para>
</section>
<anchor xml:id="_class_election_1a5a36c9bc9296e09825b49d8deb3f3874"/><section>
    <title>flipCoin()</title>
<indexterm><primary>flipCoin</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>flipCoin</secondary></indexterm>
<para><computeroutput>bool Election::flipCoin ( )<computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Function to randomly and fairly &quot;flip a coin&quot;. </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if the result variable is equal to 1 </para>

<para>false if the result variable is equal to 0 </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00139">139</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a89c14e25245d84d5214e58809f04e336"/><section>
    <title>getCandidates()</title>
<indexterm><primary>getCandidates</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>getCandidates</secondary></indexterm>
<para><computeroutput>vector&lt; <link linkend="_class_candidate">Candidate</link> &gt; &amp; Election::getCandidates ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Gets the vector of candidates in the election. </para>
</para>

<para><formalpara><title>Returns</title>

<para>vector&lt;Candidate&gt; (all the candidates in the election) </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00080">80</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a4c69a091a1504383315328f505a5f30f"/><section>
    <title>getDroopQuota()</title>
<indexterm><primary>getDroopQuota</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>getDroopQuota</secondary></indexterm>
<para><computeroutput>int Election::getDroopQuota ( )</computeroutput></para><para>

<para>Gets the number of Drooop quota in the election. </para>
</para>

<para><formalpara><title>Returns</title>

<para>int (the number of DroopQuoata) </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00076">76</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1af9ffbf9414f3129a2db5cab5b2827751"/><section>
    <title>getElectionType()</title>
<indexterm><primary>getElectionType</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>getElectionType</secondary></indexterm>
<para><computeroutput>string Election::getElectionType ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Gets the election type in the election. </para>
</para>

<para><formalpara><title>Returns</title>

<para>string (the election type) </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00078">78</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1abfa41a8e17a3a1869fc42aabb0054bbc"/><section>
    <title>getHeader()</title>
<indexterm><primary>getHeader</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>getHeader</secondary></indexterm>
<para><computeroutput>vector&lt; string &gt; &amp; Election::getHeader ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Gets the vector of each header line in the election. </para>
</para>

<para><formalpara><title>Returns</title>

<para>vector&lt;string&gt; </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00086">86</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a698e580dcf403280456bc77f70799405"/><section>
    <title>getLosers()</title>
<indexterm><primary>getLosers</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>getLosers</secondary></indexterm>
<para><computeroutput>vector&lt; <link linkend="_class_candidate">Candidate</link> * &gt; Election::getLosers ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Gets the losers vector in the election. </para>
</para>

<para><formalpara><title>Returns</title>

<para>vector&lt;Candidate*&gt; (the candidates that are losers) </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00084">84</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1ade6ad99d57f425d06f7f6f5bf28bed5c"/><section>
    <title>getNumBallots()</title>
<indexterm><primary>getNumBallots</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>getNumBallots</secondary></indexterm>
<para><computeroutput>int Election::getNumBallots ( )</computeroutput></para><para>

<para>Gets the number of ballots in the election. </para>
</para>

<para><formalpara><title>Returns</title>

<para>int (the number of ballots) </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00074">74</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1aea563e0f8efc014fe5bc6ca55b078d9a"/><section>
    <title>getNumCandidates()</title>
<indexterm><primary>getNumCandidates</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>getNumCandidates</secondary></indexterm>
<para><computeroutput>int Election::getNumCandidates ( )</computeroutput></para><para>

<para>Gets the number of candidates in the election. </para>
</para>

<para><formalpara><title>Returns</title>

<para>int (the number of candidates) </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00072">72</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a80881f59d3a334dc61a0a3d086456635"/><section>
    <title>getNumLosers()</title>
<indexterm><primary>getNumLosers</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>getNumLosers</secondary></indexterm>
<para><computeroutput>int Election::getNumLosers ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Gets the size of the losers in the election. </para>
</para>

<para><formalpara><title>Returns</title>

<para>int (the number of losers) </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00068">68</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a0b68106ee52f33286364ef5d617d77ee"/><section>
    <title>getNumSeats()</title>
<indexterm><primary>getNumSeats</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>getNumSeats</secondary></indexterm>
<para><computeroutput>int Election::getNumSeats ( )</computeroutput></para><para>

<para>Gets the size of the seats in the election. </para>
</para>

<para><formalpara><title>Returns</title>

<para>int (the number of seats) </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00070">70</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1ad1870564672bdb4d2d054d4b7f065d5d"/><section>
    <title>getNumWinners()</title>
<indexterm><primary>getNumWinners</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>getNumWinners</secondary></indexterm>
<para><computeroutput>int Election::getNumWinners ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Gets the size of the winners in the election. </para>
</para>

<para><formalpara><title>Returns</title>

<para>int (the number of winners) </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00066">66</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a0258ea1cae7db815ff507c82ce1d75a0"/><section>
    <title>getWinners()</title>
<indexterm><primary>getWinners</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>getWinners</secondary></indexterm>
<para><computeroutput>vector&lt; <link linkend="_class_candidate">Candidate</link> * &gt; Election::getWinners ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Gets the winners vector in the election. </para>
</para>

<para><formalpara><title>Returns</title>

<para>vector&lt;Candidate*&gt; (the candidates that are winners) </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00082">82</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a9f2a807ba12358daa9d2ed94946748de"/><section>
    <title>processHeaders()</title>
<indexterm><primary>processHeaders</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>processHeaders</secondary></indexterm>
<para><computeroutput>virtual void Election::processHeaders ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Abstract method to store lines from headers vector into respective members. </para>
</para>
<para>
Implemented in <link linkend="_class_i_r_v_1a3ed58707bc287c3f39ceb3c9b706bad1">IRV</link>, <link linkend="_class_o_p_l_1a553330ef2125955e8d8e6644c67d5e47">OPL</link>, and <link linkend="_class_p_o_1a18a1823c5de1ac5918b0f955412afacd">PO</link>.</para>
</section>
<anchor xml:id="_class_election_1a365a0111ad658420788253fb423b8cf1"/><section>
    <title>removeBallots()</title>
<indexterm><primary>removeBallots</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>removeBallots</secondary></indexterm>
<para><computeroutput>void Election::removeBallots (unsigned int n = <computeroutput>1</computeroutput>
)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Setter function to remove n ballots. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>unsigned</entry><entry>
<para>int n of ballots (optional, default 1) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00123">123</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a1d84fd2f5cd7b14b2e9a729e7804286f"/><section>
    <title>runElection()</title>
<indexterm><primary>runElection</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>runElection</secondary></indexterm>
<para><computeroutput>virtual void Election::runElection ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Abstract method to orchestrate an elections process. </para>
</para>
<para>
Implemented in <link linkend="_class_i_r_v_1a04ae8c5e99fce4eb302221f850904de5">IRV</link>, <link linkend="_class_o_p_l_1aedd9d37949a496c00e0cbe2746833699">OPL</link>, and <link linkend="_class_p_o_1aad1ca29b89c0515ff34459b6cdc3ab0b">PO</link>.</para>
</section>
<anchor xml:id="_class_election_1a8b0fa9b711db7a7f7236d44749729c2c"/><section>
    <title>setDroopQuota()</title>
<indexterm><primary>setDroopQuota</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>setDroopQuota</secondary></indexterm>
<para><computeroutput>void Election::setDroopQuota (unsigned int n)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Setter function to set the droop quota. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>n</entry><entry>
<para>the droop quota </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00112">112</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a2679563e40fa9fefa255377bcafc9c0e"/><section>
    <title>setElectionType()</title>
<indexterm><primary>setElectionType</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>setElectionType</secondary></indexterm>
<para><computeroutput>void Election::setElectionType (string type)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Setter function to set election type. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::string</entry><entry>
<para>type </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00133">133</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a056dcc5d34f21305c298a27282703119"/><section>
    <title>setNumberOfBallots()</title>
<indexterm><primary>setNumberOfBallots</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>setNumberOfBallots</secondary></indexterm>
<para><computeroutput>void Election::setNumberOfBallots (unsigned int n)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Setter function to set number of ballots. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>unsigned</entry><entry>
<para>int n </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00129">129</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a97214525cf583a21e43f80a770ed23dc"/><section>
    <title>setNumberOfCandidates()</title>
<indexterm><primary>setNumberOfCandidates</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>setNumberOfCandidates</secondary></indexterm>
<para><computeroutput>void Election::setNumberOfCandidates (unsigned int n)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Setter function to set number of Candidates. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>unsigned</entry><entry>
<para>int n </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00125">125</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a948d46c6c930e1a759df8370282e382b"/><section>
    <title>setNumberOfSeats()</title>
<indexterm><primary>setNumberOfSeats</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>setNumberOfSeats</secondary></indexterm>
<para><computeroutput>void Election::setNumberOfSeats (unsigned int n)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Setter function to add n ballots. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>unsigned</entry><entry>
<para>int n of ballots </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00127">127</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a9d6f8d633b57aa2cd89ce1ab6f7e553e"/><section>
    <title>writeElectionResults()</title>
<indexterm><primary>writeElectionResults</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>writeElectionResults</secondary></indexterm>
<para><computeroutput>void Election::writeElectionResults (string s)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Method to create a results file for the election. </para>
</para>

<para>Hijacks cout to ofstream and calls <link linkend="_class_election_1a1a06089736577ef9dce522ccdc46fcb2">displayResults()</link></para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::string</entry><entry>
<para>s, the name of the results file to be created </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__election_8cpp_source_1l00170">170</link> of file <link linkend="__election_8cpp_source">Election.cpp</link>.</para>
</section>
<anchor xml:id="_class_election_1a82e0c840e14b8b54cb40eef54dd29f1f"/><section>
    <title>writeToAudit()</title>
<indexterm><primary>writeToAudit</primary><secondary>Election</secondary></indexterm>
<indexterm><primary>Election</primary><secondary>writeToAudit</secondary></indexterm>
<para><computeroutput>virtual void Election::writeToAudit (string s = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[protected]</computeroutput>, <computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Abstract method to write election results and election process to an audit file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::string</entry><entry>
<para>s, file name of the to-be-generated audit file </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implemented in <link linkend="_class_i_r_v_1a2f64e517f315a0510f16920af733c865">IRV</link>, <link linkend="_class_o_p_l_1aaffe593d59e44f2d8ffcc08fbdd844e7">OPL</link>, and <link linkend="_class_p_o_1ac994e74935bcad8df1db591b5bda35c2">PO</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
<link linkend="__election_8h">Election.h</link><link linkend="__election_8cpp">Election.cpp</link></section>
</section>
